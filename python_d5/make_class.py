#!/usr/bin/env python3
import re

#Make a DNA sequence class
	# Parameters are name, sequence, and organism for a gene

class DNA_seq(object):
	def __init__(self, gene_name, sequence, organism):
		self.gene_name = gene_name
		self.sequence = sequence
		self.organism = organism
	# Write a method that calculates and returns length of self.sequence
	def length(self):
		return(len(self.sequence))
	def get_GC(self):
		A_count = self.sequence.count('A')
		T_count = self.sequence.count('T')
		G_count = self.sequence.count('G')
		C_count = self.sequence.count('C')
		length = self.length()
		GC_comp = (G_count + C_count) / length
		return GC_comp
	def return_fa(self):
		header = '>' + self.gene_name + '\n'
		fasta_form = header + self.sequence
		return fasta_form

def compare_DNA_seq(seq1, seq2):
	name_bool = seq1.gene_name == seq2.gene_name
	seq_bool = seq1.sequence == seq2.sequence
	organism_bool = seq1.organism == seq2.organism
	if (name_bool and seq_bool and organism_bool):
		return_message = 'These DNA_Seq objects are the same'
	else:
		return_message = 'These DNA_Seq objects are not the same' 
	return return_message




gene_name = 'Ascl1'
gene_seq = '''AGCACTCTCTCACTTCTGGCCAGGGAACGTGGAAGGCGCACCGACAGGGA
TCCGGCCAGGGAGGGCGAGTGAAAGAAGGAAATCAGAAAGGAAGGGAGTT
AACAAAATAATAAAAACAGCCTGAGCCACGGCTGGAGAGACCGAGACCCG
GCGCAAGAGAGCGCAGCCTTAGTAGGAGAGGAACGCGAGACGCGGCAGAG
CGCGTTCAGCACTGACTTTTGCTGCTGCTTCTGCTTTTTTTTTTCTTAGA
AACAAGAAGGCGCCAGCGGCAGCCTCACACGCGAGCGCCACGCGAGGCTC
CCGAAGCCAACCCGCGAAGGGAGGAGGGGAGGGAGGAGGAGGCGGCGTGC
AGGGAGGAGAAAAAGCATTTTCACTTTTTTTGCTCCCACTCTAAGAAGTC
TCCCGGGGATTTTGTATATATTTTTTAACTTCCGTCAGGGCTCCCGCTTC
ATATTTCCTTTTCTTTCCCTCTCTGTTCCTGCACCCAAGTTCTCTCTGTG
TCCCCCTCGCGGGCCCCGCACCTCGCGTCCCGGATCGCTCTGATTCCGCG
ACTCCTTGGCCGCCGCTGCGCATGGAAAGCTCTGCCAAGATGGAGAGCGG
CGGCGCCGGCCAGCAGCCCCAGCCGCAGCCCCAGCAGCCCTTCCTGCCGC
CCGCAGCCTGTTTCTTTGCCACGGCCGCAGCCGCGGCGGCCGCAGCCGCC
GCAGCGGCAGCGCAGAGCGCGCAGCAGCAGCAGCAGCAGCAGCAGCAGCA
GCAGCAGGCGCCGCAGCTGAGACCGGCGGCCGACGGCCAGCCCTCAGGGG
GCGGTCACAAGTCAGCGCCCAAGCAAGTCAAGCGACAGCGCTCGTCTTCG
CCCGAACTGATGCGCTGCAAACGCCGGCTCAACTTCAGCGGCTTTGGCTA
CAGCCTGCCGCAGCAGCAGCCGGCCGCCGTGGCGCGCCGCAACGAGCGCG
AGCGCAACCGCGTCAAGTTGGTCAACCTGGGCTTTGCCACCCTTCGGGAG
CACGTCCCCAACGGCGCGGCCAACAAGAAGATGAGTAAGGTGGAGACACT
GCGCTCGGCGGTCGAGTACATCCGCGCGCTGCAGCAGCTGCTGGACGAGC
ATGACGCGGTGAGCGCCGCCTTCCAGGCAGGCGTCCTGTCGCCCACCATC
TCCCCCAACTACTCCAACGACTTGAACTCCATGGCCGGCTCGCCGGTCTC
ATCCTACTCGTCGGACGAGGGCTCTTACGACCCGCTCAGCCCCGAGGAGC
AGGAGCTTCTCGACTTCACCAACTGGTTCTGAGGGGCTCGGCCTGGTCAG
GCCCTGGTGCGAATGGACTTTGGAAGCAGGTAGGTTGCATTTTGGGGTGG
GCAGGGGGGTATTCTTGCCTTCGTCCTCCCTCTGAGTGTCTGTGGAAGTG
GGGATGTCTCCAAGGAGATAAGGGGATTTTTATTTAAAGAATTTGTGAAA
GTTGGTCGATTTCAAGTCCTAGTTTGTTAGTTTCAGCACTGGCCTCTGAA
AATGGCCTTGCCCAGGTCTCCAAGGAGTGAAGGGTAGTAGTGAGGTGCAG
AGATACTGGTGAACCGAATACTGGGACATGTTAAAAGAGATGTCTACCTG
ACAGACTCTTTCCCCAGACCTCCATCTCCCTCTACCACTAGCCTACACGT
TCAAATTAACCTCTCCTGTTCTTTTCCTTATGTTATAGGGTGATCGCACA
ACCTGCATCTTTAGTGCTTTCTTGTCAGTGGCGTTGGGAGGGGGAGAAAA
GGAAAAGAAAAAAAAAAGAAGAAGAAGAAGAAAAGAGAAGAAGAAAAAAA
CGAAAACAGTCAACCAACCCCATCGCCAACTAAGCGAGGCATGCCTGAGA
GACATGGCTTTCAGAAAACGGGAAGCGCTCAGAACAGTATCTTTGCACTC
CAATCATTCACGGAGATATGAAGAGCAACTGGGACCTGAGTCAATGCGCA
AAATGCAGCTTGTGTGCAAAAGCAGTGGGCTCCTGGCAGAAGGGAGCAGC
ACACGCGTTATAGTAACTCCCATCACCTCTAACACGCACAGCTGAAAGTT
CTTGCTCGGGTCCCTTCACCTCCTCGCCCTTTCTTAAAGTGCAGTTCTTA
GCCCTCTAGAAACGAGTTGGTGTCTTTCGTCTCAGTAGCCCCCACCCCAA
TAAGCTGTAGACATTGGTTTACAGTGAAACTATGCTATTCTCAGCCCTTT
GAAACTCTGCTTCTCCTCCAGGGCCCGATTCCCAAACCCCATGGCTTCCC
TCACACTGTCTTTTCTACCATTTTCATTATAGAATGCTTCCAATCTTTTG
TGAATTTTTTATTATAAAAAATCTATTTGTATCTATCCTAACCAGTTCGG
GGATATATTAAGATATTTTTGTACATAAGAGAGAAAGAGAGAGAAAAATT
TATAGAAGTTTTGTACAAATGGTTTAAAATGTGTATATCTTGATACTTTA
ACATGTAATGCTATTACCTCTGCATATTTTAGATGTGTAGTTCACCTTAC
AACTGCAATTTTCCCTATGTGGTTTTGTAAAGAACTCTCCTCATAGGTGA
GATCAAGAGGCCACCAGTTGTACTTCAGCACCAATGTGTCTTACTTTATA
GAAATGTTGTTAATGTATTAATGATGTTATTAAATACTGTTCAAGAAGAA
CAAAGTTTATGCAGCTACTGTCCAAACTCAAAGTGGCAGCCAGTTGGTTT
TGATAGGTTGCCTTTTGGAGATTTCTATTACTGCCTTTTTTTTTCTTACT
GTTTTATTACAAACTTACAAAAATATGTATAACCCTGTTTTATACAAACTAGTTTCGTAATAAAACTTTTTCCTTTTTTTAAAATGAAAA'''
seq_simple = re.sub('\n', '', gene_seq)
gene_organism = 'hg38'

Ascl1_gene = DNA_seq(gene_name, seq_simple, gene_organism)

#print(gene_seq)

#print(Ascl1_gene.sequence)
print(Ascl1_gene.gene_name)
print(Ascl1_gene.organism)

print(Ascl1_gene.length())
print(Ascl1_gene.get_GC())
print(Ascl1_gene.return_fa())

print(compare_DNA_seq(Ascl1_gene, Ascl1_gene)) 
